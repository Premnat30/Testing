<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Processes on {{ host_name }}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1, h2 { color: #333; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; cursor: pointer; } /* Add pointer cursor to headers */
        th:hover { background-color: #e9e9e9; }
        th.sorted-asc::after { content: " ▲"; }
        th.sorted-desc::after { content: " ▼"; }
        .error { color: red; font-weight: bold; }
        .nav-bar { background-color: #f0f0f0; padding: 10px; margin-bottom: 20px; }
        .nav-bar a { text-decoration: none; padding: 8px 12px; margin-right: 5px; background-color: #e9e9e9; border: 1px solid #ccc; border-radius: 4px; color: #333; }
        .nav-bar a:hover { background-color: #ddd; }
    </style>
</head>
<body>
    <h1>Process List for {{ host_name }}</h1>

    <div class="nav-bar">
        {% for h_key in hosts %}
            <a href="{{ url_for('process_task', hostname_key=h_key) }}">{{ h_key }} Processes</a>
        {% endfor %}
        | <a href="{{ url_for('index') }}">Log Search</a>
    </div>

    {% if error %}
        <p class="error">{{ error }}</p>
    {% elif processes %}
        <table id="process-table">
            <thead>
                <tr>
                    <th onclick="sortTable(0, 'string')" class="sortable">User</th>
                    <th onclick="sortTable(1, 'number')" class="sortable">PID</th>
                    <th onclick="sortTable(2, 'number')" class="sortable">%CPU</th>
                    <th onclick="sortTable(3, 'number')" class="sortable">%MEM</th>
                    <th onclick="sortTable(4, 'number')" class="sortable">VSZ</th>
                    <th onclick="sortTable(5, 'number')" class="sortable">RSS</th>
                    <th onclick="sortTable(6, 'string')" class="sortable">TTY</th>
                    <th onclick="sortTable(7, 'string')" class="sortable">STAT</th>
                    <th onclick="sortTable(8, 'string')" class="sortable">START</th>
                    <th onclick="sortTable(9, 'string')" class="sortable">TIME</th>
                    <th onclick="sortTable(10, 'string')" class="sortable">COMMAND</th>
                </tr>
            </thead>
            <tbody>
                {% for process in processes %}
                    <tr>
                        <td>{{ process.user }}</td>
                        <td>{{ process.pid }}</td>
                        <td>{{ process.cpu }}</td>
                        <td>{{ process.mem }}</td>
                        <td>{{ process.vsz }}</td>
                        <td>{{ process.rss }}</td>
                        <td>{{ process.tty }}</td>
                        <td>{{ process.stat }}</td>
                        <td>{{ process.start }}</td>
                        <td>{{ process.time }}</td>
                        <td>{{ process.command }}</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p>No processes found or an unknown error occurred.</p>
    {% endif %}

    <script>
        // Store the current sort column and direction
        let currentSortColumn = -1;
        let isAscending = true;

        function sortTable(columnIndex, dataType) {
            const table = document.getElementById("process-table");
            const tbody = table.querySelector("tbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            const headers = table.querySelectorAll("th.sortable");

            // Reset header classes
            headers.forEach(h => h.classList.remove('sorted-asc', 'sorted-desc'));

            // Set new sort direction
            if (currentSortColumn === columnIndex) {
                isAscending = !isAscending;
            } else {
                currentSortColumn = columnIndex;
                isAscending = true;
            }

            // Add new header class for visual indicator
            const currentHeader = headers[columnIndex];
            currentHeader.classList.add(isAscending ? 'sorted-asc' : 'sorted-desc');

            // Sort the rows
            rows.sort((a, b) => {
                const aText = a.cells[columnIndex].textContent.trim();
                const bText = b.cells[columnIndex].textContent.trim();
                
                let aValue = aText;
                let bValue = bText;

                // Handle different data types for correct sorting
                if (dataType === 'number') {
                    aValue = parseFloat(aText);
                    bValue = parseFloat(bText);
                }
                
                // Compare values
                if (aValue < bValue) {
                    return isAscending ? -1 : 1;
                } else if (aValue > bValue) {
                    return isAscending ? 1 : -1;
                } else {
                    return 0;
                }
            });

            // Re-append the sorted rows to the table body
            rows.forEach(row => tbody.appendChild(row));
        }
    </script>
</body>
</html>
