<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Processes - {{ host_name }}</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

        .header h1 {
            color: #2c3e50;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .header h1 i {
            color: #3498db;
        }

        .nav {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 15px;
        }

        .nav-btn {
            padding: 8px 16px;
            background: #ecf0f1;
            border: none;
            border-radius: 6px;
            text-decoration: none;
            color: #2c3e50;
            font-size: 14px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .nav-btn:hover {
            background: #3498db;
            color: white;
            transform: translateY(-2px);
        }

        .nav-btn.active {
            background: #3498db;
            color: white;
        }

        .nav-btn.logs {
            background: #e8f5e8;
            color: #27ae60;
        }

        .error {
            background: #fee;
            color: #c0392b;
            padding: 15px;
            border-radius: 6px;
            border-left: 4px solid #c0392b;
            margin-bottom: 20px;
        }

        .table-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        thead {
            background: #2c3e50;
            color: white;
        }

        th {
            padding: 12px 15px;
            text-align: left;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s ease;
            white-space: nowrap;
        }

        th:hover {
            background: #34495e;
        }

        th.sorted-asc::after {
            content: " ↑";
            font-weight: bold;
        }

        th.sorted-desc::after {
            content: " ↓";
            font-weight: bold;
        }

        tbody tr {
            border-bottom: 1px solid #ecf0f1;
            transition: background 0.3s ease;
        }

        tbody tr:hover {
            background: #f8f9fa;
        }

        td {
            padding: 10px 15px;
            vertical-align: top;
        }

        .command-cell {
            max-width: 300px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
        }

        .empty-state i {
            font-size: 48px;
            margin-bottom: 15px;
            color: #bdc3c7;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .table-container {
                overflow-x: auto;
            }
            
            table {
                min-width: 800px;
            }
            
            .nav {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>
                <i class="fas fa-microchip"></i>
                Processes - {{ host_name }}
            </h1>
            <div class="nav">
                {% for h_key in hosts %}
                    <a href="{{ url_for('process_task', hostname_key=h_key) }}" 
                       class="nav-btn {% if h_key == host_name %}active{% endif %}">
                        <i class="fas fa-server"></i>
                        {{ h_key }}
                    </a>
                {% endfor %}
                <a href="{{ url_for('index') }}" class="nav-btn logs">
                    <i class="fas fa-search"></i>
                    Log Search
                </a>
            </div>
        </div>

        {% if error %}
            <div class="error">
                <i class="fas fa-exclamation-triangle"></i>
                {{ error }}
            </div>
        {% elif processes %}
            <div class="table-container">
                <table id="process-table">
                    <thead>
                        <tr>
                            <th onclick="sortTable(0, 'string')">User</th>
                            <th onclick="sortTable(1, 'number')">PID</th>
                            <th onclick="sortTable(2, 'number')">CPU%</th>
                            <th onclick="sortTable(3, 'number')">MEM%</th>
                            <th onclick="sortTable(4, 'number')">VSZ</th>
                            <th onclick="sortTable(5, 'number')">RSS</th>
                            <th onclick="sortTable(6, 'string')">TTY</th>
                            <th onclick="sortTable(7, 'string')">STAT</th>
                            <th onclick="sortTable(8, 'string')">START</th>
                            <th onclick="sortTable(9, 'string')">TIME</th>
                            <th onclick="sortTable(10, 'string')">COMMAND</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for process in processes %}
                            <tr>
                                <td>{{ process.user }}</td>
                                <td>{{ process.pid }}</td>
                                <td>{{ process.cpu }}</td>
                                <td>{{ process.mem }}</td>
                                <td>{{ process.vsz }}</td>
                                <td>{{ process.rss }}</td>
                                <td>{{ process.tty }}</td>
                                <td>{{ process.stat }}</td>
                                <td>{{ process.start }}</td>
                                <td>{{ process.time }}</td>
                                <td class="command-cell" title="{{ process.command }}">{{ process.command }}</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        {% else %}
            <div class="empty-state">
                <i class="fas fa-inbox"></i>
                <h3>No Processes Found</h3>
                <p>No processes were found or an unknown error occurred.</p>
            </div>
        {% endif %}
    </div>

    <script>
        let currentSortColumn = -1;
        let isAscending = true;

        function sortTable(columnIndex, dataType) {
            const table = document.getElementById("process-table");
            const tbody = table.querySelector("tbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            const headers = table.querySelectorAll("th");

            // Reset header classes
            headers.forEach(h => h.classList.remove('sorted-asc', 'sorted-desc'));

            // Set new sort direction
            if (currentSortColumn === columnIndex) {
                isAscending = !isAscending;
            } else {
                currentSortColumn = columnIndex;
                isAscending = true;
            }

            // Add visual indicator to current header
            const currentHeader = headers[columnIndex];
            currentHeader.classList.add(isAscending ? 'sorted-asc' : 'sorted-desc');

            // Sort rows
            rows.sort((a, b) => {
                const aText = a.cells[columnIndex].textContent.trim();
                const bText = b.cells[columnIndex].textContent.trim();
                
                let aValue = aText;
                let bValue = bText;

                if (dataType === 'number') {
                    aValue = parseFloat(aText) || 0;
                    bValue = parseFloat(bText) || 0;
                }
                
                if (aValue < bValue) return isAscending ? -1 : 1;
                if (aValue > bValue) return isAscending ? 1 : -1;
                return 0;
            });

            // Re-append sorted rows
            rows.forEach(row => tbody.appendChild(row));
        }
    </script>
</body>
</html>
